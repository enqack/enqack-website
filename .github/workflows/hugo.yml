name: Deploy Hugo via rsync over SSH

permissions:
  contents: read

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go (for Cache Hugo Modules)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true 

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.148.2'
          extended: true

      - name: Cache Hugo modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/hugo_cache   # Hugo modules
            resources/_gen        # Processed assets
          key: hugo-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-hugo-
              
      - name: Setup Node (LTS) with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'           # or '18.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Node.js dependencies
        run: |
          npm ci || (echo "npm ci failed, retrying..." && sleep 5 && npm ci)

      - name: Build Hugo
        run: |
          HUGO_ENV=production hugo --gc --minify --panicOnWarning
          test -s public/index.html

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts (pinned)
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SERVER_HOST_KEY }}" >> ~/.ssh/known_hosts
                  
      - name: Atomic deploy (rsync + symlink, keep 5, timestamp-hash)
        run: |
          set -euo pipefail

          TS="$(date +%Y%m%d%H%M%S)"
          SHA="$(git rev-parse --short=12 HEAD)"
          RELEASE="${TS}-${SHA}"

          RELEASES="${{ secrets.DEPLOY_PATH }}/releases"
          TARGET="$RELEASES/$RELEASE"
          STAGING="$TARGET.__new"

          # Ensure releases dir exists
          ssh -p "${{ secrets.SERVER_PORT }}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" \
            "mkdir -p '$RELEASES'"

          # Clean any stale staging dir and upload to staging
          ssh -p "${{ secrets.SERVER_PORT }}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" \
            "rm -rf '$STAGING'"

          rsync -az --delete --chmod=F644,D755 \
            -e "ssh -p ${{ secrets.SERVER_PORT }} -o PreferredAuthentications=publickey" \
            public/ "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:$STAGING/"

          # Atomically promote staging, update symlink, lexicographically prune to 5 newest
          ssh -p "${{ secrets.SERVER_PORT }}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" bash -c "'
            set -euo pipefail
            RELEASES=${RELEASES@Q}
            TARGET=${TARGET@Q}
            STAGING=${STAGING@Q}

            # Promote (atomic rename within same filesystem)
            mv -T \"$STAGING\" \"$TARGET\"

            # Point current -> TARGET atomically
            ln -sfn \"$TARGET\" \"${{ secrets.DEPLOY_PATH }}/current\"

            # Keep only 5 newest by NAME (lexicographic)
            # List directory basenames, sort descending, drop first 5, delete the rest.
            to_delete=\$(find \"$RELEASES\" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort -r | tail -n +6 || true)
            if [ -n \"\$to_delete\" ]; then
              while IFS= read -r d; do
                rm -rf \"$RELEASES/\$d\"
              done <<<\"\$to_delete\"
            fi
          '"
